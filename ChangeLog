2.0.3
	* Fixed a string caching bug in LiteralValue which resulted in invalid string representations when
	  assigning a QDate, QTime, QDateTime, or QByteArray via operator=
	* Use the CLucene StandardAnalyser by default instead of the SimpleAnalyser. This fixes indexing of 
	  numbers.

2.0.2
	* MutexModel in ReadWriteMultiThreading mode now allows multiple read operations from the same thread
	  at the same time even if a write operation is waiting. This fixes a deadlock in the Nepomuk Strigi
	  backend from KDE.

2.0.1
	* Fixed method statementCount in Sesame2 backend
	* Redland backend: Always encode strings as xls:string rather than rdfs:Literal values to match the 
	  Soprano guidelines.
	* Always set a dummy base URI in the raptor serializer
	* Fixed formatting of dateTime values.
	* Fixed NRL namespace
	* Fixed NAO namespace
	* Fixed plugin loading on MAC OS/X

2.0
	* LiteralValue is not derived from QVariant anymore but uses it internally
	* ResultSet renamed to QueryResultIterator
	* Fixed const'ness of many methods
	* Changed StatementIterator layout to match QueryResultIterator's layout using next() and current() methods.
	* Added vocabulary namespaces for usage of shared QUrl values for RDF/S and XML Schema URIs.
	* Added FilterModel class
	* Added RDF/S wrapper methods for easy access to RDF/S resource statements (RDFSchemaWrapper)
	* Added "apidox" build target for building the Soprano API documentation.
	* Added simple inferencing model based on rule files including a rule file parser.
	* Added an index filter model which creates a CLucene index of all literal statements.
	* Support for binary data in RDF literals encoded as base64 in LiteralValue
	* Added Vocabulary namespace containing basic ontology URIs such as RDF, RDFS, XML Schema, and NRL
	* TriG parser through raptor >= 1.4.16
	* NQuads (trivial extension of NTriples) parser and serializer
	* Soprano server library and simple daemon including D-Bus interface.
	* sopranocmd tool which allows to control the soprano server as well as work on the data directly
	  through the backends.
	* Working SPARQL ASK queries with rasqal >= 0.9.15
	
