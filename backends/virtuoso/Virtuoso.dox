/**
 * \page soprano_backend_virtuoso Virtuoso Storage Backend
 *
 * The Virtuoso storage backend provides access to Virtuoso servers. It can connect to
 * already running servers as well as spawn its own local instance. The Virtuoso server
 * is accessed via ODBC through the client library <a href="http://www.iodbc.org/">iODBC</a>.
 * Currently no other client libraries are supported (which also means that this backend
 * can only be used on systems that have libiODBC which excludes Windows).
 *
 * The name of the backend is \p virtuosobackend. Thus, to use it one simply has to load it as follows:
 *
 * \code
 * const Soprano::Backend* virtBack = Soprano::PluginManager::instance()->discoverBackendByName("virtuosobackend");
 * \endcode
 *
 * \section soprano_backend_vituoso_settings Supported Settings
 *
 * The Virtuoso backend supports the following settings:
 *
 * \li Soprano::BackendOptionHost - Set the host the Virtuoso server is running on.
 * \li Soprano::BackendOptionPort - Set the port the Virtuoso server is running on.
 * \li Soprano::BackendOptionUsername - Set the user name to connect to the Virtuoso server.
 * \li Soprano::BackendOptionPassword - Set the password to connect to the Virtuoso server.
 * \li Soprano::BackendOptionStorageDir - Set the storage folder to use when spawning a local
 *      instance of Virtuoso. This can not be combined with any of the settings above.
 *
 *
 * \section soprano_backend_vituoso_specialities Virtuoso Specialities
 *
 * Since Virtuoso is an SQL server and, thus, does store all RDF data in SQL tables it
 * has some characteristics that are worth mentioning:
 *
 * \subsection soprano_virtuoso_empty_graph The Empty Graph
 *
 * Virtuoso/SPAURL has no notion of the empty/default graph. Thus, by default,
 * it is not possible to add statements to the empty/default graph. The %Soprano backend
 * works around this problem by introducing a special named graph which is used internally
 * to store triples that belong to the default/empty graph.
 *
 * This means that a conversion needs to take place whenever the empty graph or the special
 * graph are encountered. This introduces a slight performance penalty. In the future an option
 * might be introduced to disable this behaviour.
 *
 *
 * \subsection soprano_virtuoso_system_statements Virtuoso System Statements
 *
 * Virtuoso has a set of virtual system statements which must not be removed. Since these are
 * added at startup, an empty database already contains roughly 1200 statements in one
 * named graph. The backend tries to filter these system statements which works well on all
 * methods except Soprano::Model::executeQuery. This method is too generic to simply perform
 * this filtering without a query parser.
 *
 *
 * \subsection soprano_virtuoso_types SQL Types
 *
 * Virtuoso, being an SQL server, does not have specific types for boolean, decimal and others.
 * They are all represented as SQL integer values.
 *
 * The backend does solve this issue for boolean values only by introducing a fake datatype
 * for boolean literals: a non-empty string means true while an empty string means false.
 * This is converted internally so the user of the backend will never notice it. The only exception
 * may be queries that contain filters. More input is needed here.
 *
 * The same hack used for boolean values is currently used for time and datetime values, too. This
 * is caused by the fact that Virtuoso looses the fractions of seconds. It is very well possible
 * that this can simply be solved by changing some setting. Again: help is appreciated.
 */
